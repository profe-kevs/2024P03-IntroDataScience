---
title: Lección 04
subtitle: Selección de datos
format: 
  clean-revealjs:
    self-contained: true
author:
  - name: Kevin A. Hernández Rostrán
    orcid: 0000-0001-7883-8573
    email: khernandez4@ucreativa.com
    affiliations: UCreativa
date: last-modified
---

# Listas

## Listas

### Tamaño de una lista

```
integer_list = [1, 2, 3]
list_length = len(integer_list) # es igual a 3
list_sum = sum(integer_list) # es igual a 6
```

### Obtener o establecer

Se puede obtener o establecer el elemento n de una lista con corchetes:

```
x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
zero = x[0] 
one = x[1] 
nine = x[-1] 
eight = x[-2] 
x[0] = -1 
```

## Listas

### slicing/cortar/partir una lista

También se pueden utilizar corchetes para crear slices en listas (cortes o
arreglos). El corte `i:j` significa todos los elementos desde `i` (incluido) hasta `j`
(excluido). Si dejamos fuera el principio del corte, lo extraeremos desde el
principio de la lista, pero, si dejamos fuera el final del corte, lo extraeremos
hasta el final:


```{.python}
first_three = x[:3] # [-1, 1, 2]
three_to_end = x[3:] # [3, 4, ..., 9]
one_to_four = x[1:5] # [1, 2, 3, 4]
last_three = x[-3:] # [7, 8, 9]
without_first_and_last = x[1:-1] # [1, 2, ..., 8]
copy_of_x = x[:] # [-1, 1, 2, ..., 9]
```

## Listas

### También funciona para cadenas

De forma similar se pueden crear cortes de cadenas y otros tipos
"secuenciales".

Un corte puede admitir un tercer argumento para indicar su stride
(avance), que puede ser negativo:

```{.py}
every_third = x[::3] # [-1, 3, 6, 9]
five_to_three = x[5:2:-1] # [5, 4, 3]
```

## Listas
### Operador in

Python tiene un operador in para comprobar los miembros de la lista:

```{.py}
1 in [1, 2, 3] # True
0 in [1, 2, 3] # False
```

# Diccionarios

## Diccionarios

### Creación

Otra estructura de datos fundamental es un diccionario, que asocia valores
a claves y permite recuperar rápidamente el valor correspondiente a una
determinada clave:

```{.py}
empty_dict = {}                   # pitónico
empty_dict2 = dict()              # menos pitónico
grades = {"Joel": 80, "Tim": 95}  # dict literal
```
Se puede consultar el valor para una clave utilizando corchetes:

```{.py}
joels_grade = grades[“Joel”] # es igual a 80
```

## Diccionarios
### Obtener elementos

Pero se obtendrá un `KeyError` si se pregunta por una clave que no está en
el diccionario:

```{.py}
try:
  kates_grade = grades["Kate"]
except KeyError:
  print("no grade for Kate!")
```

Se puede comprobar la existencia de una clave utilizando in:

```{.py}
joel_has_grade = "Joel" in grades # True
kate_has_grade = "Kate" in grades # False
```

Esta verificación de membresía es aún más rápida para diccionarios
grandes.

## Diccionarios
### Método `get`

Los diccionarios tienen un método get que devuelve un valor
predeterminado (en lugar de levantar una excepción) cuando se consulta una
clave que no está en el diccionario:

```{.py}
joels_grade = grades.get("Joel", 0) # es igual a 80
kates_grade = grades.get("Kate", 0) # es igual a 0
no_ones_grade = grades.get("No One") # el valor predeterminado es None
```
Se pueden asignar pares clave/valor utilizando los mismos corchetes:
```{.py}
grades["Tim"] = 99 # reemplaza el valor anterior
grades["Kate"] = 100 # añade una tercera entrada
num_students = len(grades) # es igual a 3
```

## Diccionarios

### Ejemplo

```{.py}
tweet = {
  "user" : "joelgrus",
  "text" : "Data Science is Awesome",
  "retweet_count" : 100,
  "hashtags" : ["#data", "#science", "#datascience", "#awesome", "#yolo"]
}
```

### Operaciones de clave-valor

```{.py}
tweet_keys = tweet.keys() # iterable para las claves
tweet_values = tweet.values() # iterable para los valores
tweet_items = tweet.items() # iterable para las tuplas (clave, valor)
"user" in tweet_keys # True, pero no pitónico
"user" in tweet # forma pitónica de comprobar claves
"joelgrus" in tweet_values # True (es lenta, pero la única forma de verificar)
```

# Contadores

## Contar palabras

Un Counter convierte una secuencia de valores en un objeto de tipo defaultdict(int) mapeando claves en contadores:

```{.py}
from collections import Counter
c = Counter([0, 1, 2, 0]) # c es (básicamente) {0: 2, 1: 1, 2: 1}
```

Lo que nos ofrece un modo muy sencillo de resolver problemas de word_counts:

```{.py}
# recuerde, document es una lista de palabras
word_counts = Counter(document)
```

# Flujos de control

## If

Recordemos el if:

```{.py}
if 1 > 2:
  message = "if only 1 were greater than two..."
elif 1 > 3:
  message = "elif stands for ‘else if’"
else:
  message = "when all else fails use else (if you want to)"
```

Se puede también escribir un ternario if-then-else en una sola línea, cosa
que haremos muy de tanto en tanto:

```{.py}
parity = "even" if x % 2 == 0 else "odd"
```

## While

Python tiene un bucle while:

```{.py}
x = 0
while x < 10:
  print(f"{x} is less than 10")
  x += 1
```

## For

Aunque con mucha más frecuencia usaremos `for` e `in`:

```{.py}
# range(10) es los números 0, 1, ..., 9
for x in range(10):
  print(f"{x} is less than 10")
```

Si necesitáramos lógica más compleja, podríamos utilizar `continue` y
`break`:

```{.py}
for x in range (10):
  if X == 3:
    continue
  if x == 5:
    break
  print(x)
# va inmediatamente a la siguiente repetición
# sale del todo del bucle
```
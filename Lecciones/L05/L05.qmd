---
title: Lección 05
subtitle: Continuación Python
format: 
  clean-revealjs:
    self-contained: true
    auto-stretch: false
author:
  - name: Kevin A. Hernández Rostrán
    orcid: 0000-0001-7883-8573
    email: khernandez4@ucreativa.com
    affiliations: UCreativa
date: last-modified
---

# Repaso de funciones

## Pero antes

{{< video https://www.youtube.com/watch?v=Lywi5uUfCZ8 width="100%" height="85%" >}}

## Concepto de "Nada"

El objeto `None` de Python, denota falta de valor. Este objeto no tiene métodos. Debe tratarse como cualquier otro objeto con respecto a los recuentos de referencia.

### Ejemplos

::::: columns
::: {.column width="50%"}
``` py
pi = 3.14
type(pi)      # <class 'float'>
```
:::

::: {.column width="50%"}
``` py
a = None
type(a)       # <class 'NoneType'>
```
:::
:::::

## Repaso de funciones

![](2024-06-11-18-18-21.png){width="60%"}

# Flujos de control

## If

Recordemos el if:

``` py
if 1 > 2:
  message = "if only 1 were greater than two..."
elif 1 > 3:
  message = "elif stands for ‘else if’"
else:
  message = "when all else fails use else (if you want to)"
```

Se puede también escribir un ternario if-then-else en una sola línea, cosa que haremos muy de tanto en tanto:

``` py
parity = "even" if x % 2 == 0 else "odd"
```

## While

Python tiene un bucle while:

``` py
x = 0
while x < 10:
  print(f"{x} is less than 10")
  x += 1
```

## For

Aunque con mucha más frecuencia usaremos `for` e `in`:

``` py
# range(10) es los números 0, 1, ..., 9
for x in range(10):
  print(f"{x} is less than 10")
```

Si necesitáramos lógica más compleja, podríamos utilizar `continue` y `break`:

``` py
for x in range (10):
  if X == 3:
    continue
  if x == 5:
    break
  print(x)
# va inmediatamente a la siguiente repetición
# sale del todo del bucle
```

## Ordenar

Toda lista de Python tiene un método `sort` que la ordena en su lugar. Si no queremos estropear nuestra lista, podemos usar la función `sorted`, que devuelve una lista nueva:

``` py
x = [4, 1, 2, 3]
y = sorted(x)     # y es [1, 2, 3, 4], x queda igual
x.sort()          # ahora x es [1, 2, 3, 4]
```

# Listas

## Comprensiones de listas

Con frecuencia, vamos a querer transformar una lista en otra distinta seleccionando solo determinados elementos, transformando elementos o haciendo ambas cosas. La forma pitónica de hacer esto es con list comprehensions, o comprensiones de listas:

``` py
even_numbers = [x for x in range(5) if x % 2 == 0]     # [0, 2, 4]
squares = [x * x for x in range(5)]                    # [0, 1, 4, 9, 16]
even_squares = [x * x for x in even_numbers]           # [0, 4, 16]
```

## Comprensiones de listas

De forma similar, se pueden convertir listas en diccionarios o conjuntos:

``` py
square_dict = {x: x * x for x in range(5)}     # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
square_set = {x * x for x in [1, -1]}          # {1}
```

## Comprensiones de listas

Una comprensión de lista puede incluir varios `for`:

``` py
pairs = [(x, y)
for x in range(10)
for y in range(10)] # 100 pares (0,0) (0,1) ... (9,8), (9,9)
```

# Aleatoriedad

## Aleatoriedad

A medida que aprendamos ciencia de datos, necesitaremos con frecuencia generar números aleatorios, lo que podemos hacer con el módulo `random`:

``` py
import random
random.seed(10)        # esto asegura que obtenemos los mismos resultados cada vez


four_uniform_randoms = [random.random() for _ in range(4)]

# [0.5714025946899135,    # random.random() produce números
# 0.4288890546751146,     # de manera uniforme entre 0 y 1.
# 0.5780913011344704,     # Es la función random que utilizaremos
# 0.20609823213950174]    # con más frecuencia.
```

## Aleatoriedad

El módulo `random` produce en realidad números pseudoaleatorios (es decir, deterministas) basados en un estado interno que se puede configurar con `random.seed` si lo que se desea es obtener resultados reproducibles:

``` py
random.seed(10) # establece la semilla en 10
print(random.random()) # 0.57140259469
random.seed(10) # reinicia la semilla en 10
print(random.random()) # 0.57140259469 de nuevo
```